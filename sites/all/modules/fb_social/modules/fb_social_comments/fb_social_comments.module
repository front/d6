<?php
// $Id: fb_social_comments.module,v 1.3.2.4 2010/05/04 14:18:54 ferdi Exp $

/**
 * Implementation of hook_theme
 */
function fb_social_comments_theme() {
  return array(
    'fb_social_comments_block_comments_view' => array(),
  );
}

/**
 * Implementation of hook_menu
 */
function fb_social_comments_menu(){
  $items = array();

  $items['admin/settings/fb/social/comments'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'comments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fb_social_comments_settings_form'),
    'file' => 'fb_social_comments.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 2,
  );  
  
  return $items;
}

/**
 * Implementation of hook_block
 */
function fb_social_comments_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op) {
    case 'list' :
      
      $blocks['comments'] = array(
        'info' => t('fb comments'), 
        'admin' => TRUE 
      );
      
      return $blocks;
    case 'view' :
      switch ($delta) {
        case 'comments' :
          // show the block comment only for nodes
          $node = menu_get_object();
          
          if (is_object($node) && $node -> nid){
            return array(
              'subject' => t(''), 
              'content' => fb_social_comments_render($node),
            );
          
          }
      }
      break;
  }
}


/**
 * Implementation of hook_menu_alter
 */
function fb_social_comments_menu_alter(&$items){
  $items['node/%node']['page callback'] = 'fb_social_comments_page_view'; 
}

function fb_social_comments_link_alter(&$links, $node){
  if(!isset($links['comment_add'])) return;
  if(fb_social_comments_type($node -> type)){
    unset($links['comment_add']);
  }
}

/**
 * Menu callback; takes the place of Node module's default function.
 */
function fb_social_comments_page_view($node, $cid = NULL) {
  drupal_set_title(check_plain($node->title));
  return fb_social_comments_page_view_show($node, $cid);
}

/**
 * Generate a page displaying a single node, along with its comments.
 */
function fb_social_comments_page_view_show($node, $cid, $message = FALSE){
  if ($message) {
    drupal_set_title(t('Revision of %title from %date', array(
        '%title' => $node->title, 
        '%date' => format_date($node->revision_timestamp) 
    )));
  }
  $output = node_view($node, FALSE, TRUE);
  
  if (fb_social_comments_type($node->type)) {
    
    $output .= fb_social_comments_render($node);
  }
  elseif ($node->comment && function_exists('comment_render')) {
    
    $output .= comment_render($node, $cid);
  
  }
  
  // Update the history table, stating that this user viewed this node.
  node_tag_new($node->nid);
  
  return $output;
}

function fb_social_comments_render($node){
  $xid = url($_GET['q'], array('absolute' => TRUE, 'alias' => TRUE )); // better way ?
  
  $url = url($_GET['q'], array('absolute' => TRUE)); 
  
  
  $attrs = array(
      'xid' => urlencode($xid),  // why is drupal_urlencode not working ?
      'title' => $node -> title, 
      'url' => $url,
      'numposts' => variable_get('fb_social_comments_numposts', 10), 
      'width' => variable_get('fb_social_comments_width', 420),
      'css' => variable_get('fb_social_comments_css', ''),
      'simple' => variable_get('fb_social_comments_simple', 0),
      'reverse' => variable_get('fb_social_comments_reverse', 0),
      'publish_feed' => variable_get('fb_social_comments_publish_feed', 0),
  );
  
  $res = '<fb:comments ' . drupal_attributes($attrs) . '>';
  //$res .= '<fb:title>Comments on: ' .$node -> title. '</fb:title>';
  $res .= '</fb:comments>';
  return $res;
}



/**
 * helper function for testing wether $type 
 * is selected to be a fb_social_comment type
 */
function fb_social_comments_type($type){
  $fb_like_types = variable_get('fb_social_comments_node_types', array());
  return (isset($fb_like_types[$type]) && $fb_like_types[$type]) ? TRUE : FALSE;
}